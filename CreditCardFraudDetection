import pandas as pd
import numpy as np
import sklearn
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report,accuracy_score
import scipy
from sklearn.neighbors import LocalOutlierFactor
from sklearn.ensemble import IsolationForest
from sklearn.svm import OneClassSVM
from pylab import rcParams
rcParams['figure.figsize'] = 15, 7
RANDOM_S = 43
LABELS = ["NORMAL", "FRAUD"]

credit_data = pd.read_csv('creditcard.csv')

credit_data.head()

credit_data.info()

credit_data.isnull().values.any()

class_count = pd.value_counts(credit_data['Class'], sort = True)
class_count.plot(kind = 'bar', rot=0)
plt.title("Transaction Class Distribution")
plt.xticks(range(2), LABELS)
plt.xlabel("Class")
plt.ylabel("Frequency")

fraud = credit_data[credit_data['Class']==1]
normal = credit_data[credit_data['Class']==0]

print(fraud.shape,normal.shape)

fraud.Amount.describe()

f, (ax1, ax2) = plt.subplots(1, 2, sharex=True)
f.suptitle('Amount per transaction using class')
bins = 70
ax1.hist(fraud. Amount, bins = bins)
ax1.set_title('Fraud')
ax2.hist(normal. Amount, bins = bins)
ax2.set_title('Normal')
plt.xlabel('Amount ($)')
plt.ylabel('Number of Transactions')
plt.xlim((0, 20000))
plt.yscale('log')
plt.show();


f, (ax1, ax2) = plt.subplots(1, 2, sharex=True)
f.suptitle('Time of transaction vs Amount using class')
ax1.scatter(fraud.Time, fraud.Amount)
ax1.set_title('Fraud')
ax2.scatter(normal.Time, normal.Amount)
ax2.set_title('Normal')
plt.xlabel('Time (in Seconds)')
plt.ylabel('Amount')
plt.show();

credit_data = credit_data.sample(frac = 0.2, random_state=1)
credit_data.shape

credit_data.shape

fraud = credit_data[credit_data['Class']==1]
valid = credit_data[credit_data['Class']==0]
outlier_fraction = len(fraud)/float(len(valid))

print(outlier_fraction)
print("Fraud cases : {}".format(len(fraud)))
print("Valid cases : {}".format(len(valid)))

import seaborn as sns
corrmat = credit_data.corr()
top_corr_features =  corrmat.index
plt.figure(figsize=(35,35))
g=sns.heatmap(credit_data[top_corr_features].corr(),annot=True,cmap="RdYlGn")

columns= credit_data.columns.tolist()
columns= [c for c in columns if  c not in ["Class"]]
target="Class"
state = np.random.RandomState (44)
X = credit_data[columns]
Y = credit_data[target]
X_outliers = state.uniform(low=0, high=1, size=(X.shape [1], X.shape[1]))
print(X.shape)
print(Y.shape)


##Defining the outliers detection methods
from sklearn.svm import OneClassSVM

Classifiers = {
    "Isolation Forest":IsolationForest(n_estimators=103, max_samples=len(X),
                                       contamination=outlier_fraction, random_state=state, verbose=0),
    "Local Outlier Factor":LocalOutlierFactor(n_neighbors=33, algorithm="auto",
                                       leaf_size=39, metric='minkowski',
                                       p=2, metric_params=None, contamination=outlier_fraction),
    "Support Vector Machine":OneClassSVM(kernel='rbf', degree=3,gamma=0.1,nu=0.05,max_iter=-1)
}

type(Classifiers)

n_outliers = len(fraud)
for i, (clf_name,clf) in enumerate(Classifiers.items()):
    if clf_name == "Local Outlier Factor":
        y_pred = clf.fit_predict(X)
        scores_prediction = clf.negative_outlier_factor_
    elif clf_name == "Support Vector Machine":
        clf.fit(X)
        y_pred = clf.predict(X)
    else:
        clf.fit(X)
        scores_predictiopn = clf.decision_function(X)
        y_pred = clf.predict(X)
        y_pred[y_pred == 1] = 0
        y_pred[y_pred == -1] = 1
        n_errors = (y_pred != Y).sum()
        print("{}: {}".format(clf_name, n_errors))
        print("Accuracy Score :")
        print(accuracy_score(Y,y_pred))
        print("Classification Report :")
        print(classification_report(Y,y_pred))

